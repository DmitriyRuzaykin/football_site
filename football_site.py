import streamlit as st
import pandas as pd
import json
from datetime import datetime
from collections import defaultdict
import streamlit_analytics
with streamlit_analytics.track():
    st.set_page_config(page_title="–§—É—Ç–±–æ–ª –í–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ 2025", layout="wide")

    st.markdown(
        '''
        <style>
            .stTabs [data-baseweb="tab"] {
                background-color: #f0f2f6;
                padding: 10px 20px;
                margin-right: 5px;
                border-radius: 10px 10px 0 0;
                border: 1px solid #ccc;
                font-weight: 500;
            }
            .stTabs [aria-selected="true"] {
                background-color: #ffffff;
                border-bottom: 2px solid #ff4b4b;
                color: black;
            }
        </style>
        ''',
        unsafe_allow_html=True
    )


    # –í–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["–ß–µ–º–ø–∏–æ–Ω–∞—Ç", "–ö—É–±–æ–∫", "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ê–Ω–æ–Ω—Å —Ç—É—Ä–∞"])

    with tab1:  # –ß–µ–º–ø–∏–æ–Ω–∞—Ç
        col1, col2 = st.columns([1, 8])
        with col2:
            st.title("üèÜ –ß–µ–º–ø–∏–æ–Ω–∞—Ç –í–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É 2025 –≥–æ–¥–∞")

        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        matches = pd.read_csv("matches.csv", encoding='utf-8-sig', na_values=['', ' '])
        df_schedule = pd.read_csv("schedule.csv", encoding='utf-8-sig')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"] = pd.to_numeric(matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"], errors='coerce')
        matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"] = pd.to_numeric(matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"], errors='coerce')

        teams = pd.unique(matches[["–•–æ–∑—è–µ–≤–∞", "–ì–æ—Å—Ç–∏"]].values.ravel())
        stats = {team: {"–ò–≥—Ä—ã": 0, "–ü–æ–±–µ–¥—ã": 0, "–ù–∏—á—å–∏": 0, "–ü–æ—Ä–∞–∂–µ–Ω–∏—è": 0,
                        "–ó–∞–±–∏—Ç–æ": 0, "–ü—Ä–æ–ø—É—â–µ–Ω–æ": 0, "–û—á–∫–∏": 0} for team in teams}

        for _, row in matches.iterrows():
            home, away = row["–•–æ–∑—è–µ–≤–∞"], row["–ì–æ—Å—Ç–∏"]
            hg, ag = row["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"], row["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"]

            if pd.isna(hg) or pd.isna(ag):
                continue

            try:
                hg = int(hg) if not pd.isna(hg) else 0
                ag = int(ag) if not pd.isna(ag) else 0
            except (ValueError, TypeError):
                continue

            stats[home]["–ò–≥—Ä—ã"] += 1
            stats[away]["–ò–≥—Ä—ã"] += 1
            stats[home]["–ó–∞–±–∏—Ç–æ"] += hg
            stats[home]["–ü—Ä–æ–ø—É—â–µ–Ω–æ"] += ag
            stats[away]["–ó–∞–±–∏—Ç–æ"] += ag
            stats[away]["–ü—Ä–æ–ø—É—â–µ–Ω–æ"] += hg

            if hg > ag:
                stats[home]["–ü–æ–±–µ–¥—ã"] += 1
                stats[away]["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"] += 1
                stats[home]["–û—á–∫–∏"] += 3
            elif hg < ag:
                stats[away]["–ü–æ–±–µ–¥—ã"] += 1
                stats[home]["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"] += 1
                stats[away]["–û—á–∫–∏"] += 3
            else:
                stats[home]["–ù–∏—á—å–∏"] += 1
                stats[away]["–ù–∏—á—å–∏"] += 1
                stats[home]["–û—á–∫–∏"] += 1
                stats[away]["–û—á–∫–∏"] += 1

        table_data = []
        for team, s in stats.items():
            table_data.append({
                "–ö–æ–º–∞–Ω–¥–∞": team,
                "–ò–≥—Ä—ã": int(s["–ò–≥—Ä—ã"]),
                "–ü–æ–±–µ–¥—ã": int(s["–ü–æ–±–µ–¥—ã"]),
                "–ù–∏—á—å–∏": int(s["–ù–∏—á—å–∏"]),
                "–ü–æ—Ä–∞–∂–µ–Ω–∏—è": int(s["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"]),
                "–ó–∞–±–∏—Ç–æ": int(s["–ó–∞–±–∏—Ç–æ"]),
                "–ü—Ä–æ–ø—É—â–µ–Ω–æ": int(s["–ü—Ä–æ–ø—É—â–µ–Ω–æ"]),
                "–†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π": int(s["–ó–∞–±–∏—Ç–æ"]) - int(s["–ü—Ä–æ–ø—É—â–µ–Ω–æ"]),
                "–û—á–∫–∏": int(s["–û—á–∫–∏"])
            })

        df = pd.DataFrame(table_data)
        df = df.sort_values(by=["–û—á–∫–∏", "–†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π"], ascending=[False, False]).reset_index(drop=True)
        df.insert(0, "‚Ññ", range(1, len(df) + 1))

        cols = ["‚Ññ", "–ö–æ–º–∞–Ω–¥–∞", "–ò–≥—Ä—ã", "–ü–æ–±–µ–¥—ã", "–ù–∏—á—å–∏", "–ü–æ—Ä–∞–∂–µ–Ω–∏—è", "–ó–∞–±–∏—Ç–æ", "–ü—Ä–æ–ø—É—â–µ–Ω–æ", "–†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π", "–û—á–∫–∏"]
        df = df[cols]

        st.subheader("üìä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        st.dataframe(df, use_container_width=True)

        st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π")
        played_matches = matches[
            (~matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"].isna() & ~matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"].isna()) &
            ((matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"] != 0) | (matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"] != 0))
            ]

        played_rounds = sorted(played_matches["–¢—É—Ä"].unique())

        if played_rounds:
            selected_round = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä",
            played_rounds,
            index=len(played_rounds) - 1
        )
            round_matches = matches[matches["–¢—É—Ä"] == selected_round].copy()


            def format_result(row):
                if pd.isna(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤']) or pd.isna(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π']):
                    return "–ù–µ —Å—ã–≥—Ä–∞–Ω–æ"
                try:
                    return f"{int(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤'])}:{int(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π'])}"
                except (ValueError, TypeError):
                    return "–ù–µ —Å—ã–≥—Ä–∞–Ω–æ"


            round_matches["–†–µ–∑—É–ª—å—Ç–∞—Ç"] = round_matches.apply(format_result, axis=1)

            st.dataframe(
                round_matches[["–•–æ–∑—è–µ–≤–∞", "–ì–æ—Å—Ç–∏", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]],
                use_container_width=True,
                hide_index=True,
                column_config={
                    "–•–æ–∑—è–µ–≤–∞": "–•–æ–∑—è–µ–≤–∞",
                    "–ì–æ—Å—Ç–∏": "–ì–æ—Å—Ç–∏",
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç": st.column_config.TextColumn("–†–µ–∑—É–ª—å—Ç–∞—Ç")
                }
            )

            # –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç—á—É (—ç—Ç–æ—Ç –±–ª–æ–∫ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω)
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞")

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–µ
            played_in_round = round_matches[
                (~round_matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"].isna()) &
                (~round_matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"].isna()) &
                ((round_matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"] != 0) | (round_matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"] != 0))
                ]

            if not played_in_round.empty:
                match_list = [f"{row['–•–æ–∑—è–µ–≤–∞']} - {row['–ì–æ—Å—Ç–∏']} ({int(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤'])}:{int(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π'])})"
                              for _, row in played_in_round.iterrows()]
                selected_match = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", match_list)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
                selected_match_data = None
                for _, row in played_in_round.iterrows():
                    if f"{row['–•–æ–∑—è–µ–≤–∞']} - {row['–ì–æ—Å—Ç–∏']} ({int(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤'])}:{int(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π'])})" == selected_match:
                        selected_match_data = row
                        break

                if selected_match_data is not None:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –º–∞—Ç—á–µ–π
                    try:
                        with open('squads.json', 'r', encoding='utf-8') as f:
                            team_squads = json.load(f)
                        with open('match_stats.json', 'r', encoding='utf-8') as f:
                            match_stats = json.load(f)
                    except FileNotFoundError as e:
                        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç—á—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                        team_squads = {}
                        match_stats = {"matches": []}

                    if team_squads:
                        home_team = selected_match_data['–•–æ–∑—è–µ–≤–∞']
                        away_team = selected_match_data['–ì–æ—Å—Ç–∏']
                        match_date = selected_match_data.get('–î–∞—Ç–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')

                        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
                        current_match_stats = None
                        for match in match_stats["matches"]:
                            if (match["home_team"] == home_team and
                                    match["away_team"] == away_team and
                                    match.get("round") == selected_round):
                                current_match_stats = match
                                break

                        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        tab_goals, tab_yellow, tab_red = st.tabs(["–ì–æ–ª—ã", "–ñ—ë–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", "–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"])

                        with tab_goals:
                            st.markdown(f"### –ì–æ–ª—ã –≤ –º–∞—Ç—á–µ {home_team} - {away_team}")
                            if current_match_stats and "goals" in current_match_stats and current_match_stats["goals"]:
                                goals_data = []
                                for goal in current_match_stats["goals"]:
                                    goals_data.append({
                                        "–ö–æ–º–∞–Ω–¥–∞": goal["team"],
                                        "–ò–≥—Ä–æ–∫": goal["player"],
                                        "–ú–∏–Ω—É—Ç–∞": goal["minute"],
                                        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç": goal.get("assist", "-")
                                    })
                                st.dataframe(
                                    pd.DataFrame(goals_data),
                                    use_container_width=True,
                                    hide_index=True
                                )
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–∞—Ö –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ")

                        with tab_yellow:
                            st.markdown(f"### –ñ—ë–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Ç—á–µ {home_team} - {away_team}")
                            if current_match_stats and "yellow_cards" in current_match_stats and current_match_stats[
                                "yellow_cards"]:
                                yellow_data = []
                                for card in current_match_stats["yellow_cards"]:
                                    yellow_data.append({
                                        "–ö–æ–º–∞–Ω–¥–∞": card["team"],
                                        "–ò–≥—Ä–æ–∫": card["player"],
                                        "–ú–∏–Ω—É—Ç–∞": card["minute"]
                                    })
                                st.dataframe(
                                    pd.DataFrame(yellow_data),
                                    use_container_width=True,
                                    hide_index=True
                                )
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ")

                        with tab_red:
                            st.markdown(f"### –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Ç—á–µ {home_team} - {away_team}")
                            if current_match_stats and "red_cards" in current_match_stats and current_match_stats[
                                "red_cards"]:
                                red_data = []
                                for card in current_match_stats["red_cards"]:
                                    red_data.append({
                                        "–ö–æ–º–∞–Ω–¥–∞": card["team"],
                                        "–ò–≥—Ä–æ–∫": card["player"],
                                        "–ú–∏–Ω—É—Ç–∞": card["minute"]
                                    })
                                st.dataframe(
                                    pd.DataFrame(red_data),
                                    use_container_width=True,
                                    hide_index=True
                                )
                            else:
                                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞")
            else:
                st.info("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–µ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        st.subheader("üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏–≥—Ä (–ø–æ —Ç—É—Ä–∞–º)")
        df_schedule["–î–∞—Ç–∞"] = pd.to_datetime(df_schedule["–î–∞—Ç–∞"].astype(str) + ".2025", format="%d.%m.%Y", errors="coerce")
        df_schedule["–î–∞—Ç–∞"] = df_schedule["–î–∞—Ç–∞"].dt.strftime("%d.%m.%Y")
        today = pd.to_datetime(datetime.now().date())
        future_rounds = pd.to_datetime(df_schedule["–î–∞—Ç–∞"], format="%d.%m.%Y", errors="coerce")
        default_round = df_schedule.loc[future_rounds >= today, "–¢—É—Ä"].min() if not future_rounds.empty else df_schedule[
            "–¢—É—Ä"].max()
        selected_schedule_round = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è",
            sorted(df_schedule["–¢—É—Ä"].unique()),
            index=list(sorted(df_schedule["–¢—É—Ä"].unique())).index(default_round),
            key="schedule"
        )
        st.dataframe(df_schedule[df_schedule["–¢—É—Ä"] == selected_schedule_round], use_container_width=True)

    with tab2:  # –ö—É–±–æ–∫
        st.title("ü•á –ö—É–±–æ–∫ –í–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É 2025 –≥–æ–¥–∞")

        st.markdown("""
        <style>
            .cup-header {
                font-size: 22px;
                font-weight: bold;
                color: #2c3e50;
                margin-top: 25px;
                margin-bottom: 10px;
                border-bottom: 2px solid #ff4b4b;
                padding-bottom: 5px;
            }
            .cup-row {
                font-size: 16px;
                margin-bottom: 5px;
                padding: 5px;
            }
            .cup-result {
                font-weight: bold;
            }
            .cup-winner {
                color: green;
                font-weight: bold;
            }
            .cup-match {
                display: flex;
                justify-content: space-between;
            }
        </style>
        """, unsafe_allow_html=True)

        cup_matches = [
            {"stage": "1/8 —Ñ–∏–Ω–∞–ª–∞", "date": "07.05.2025", "home": "–§–ö –≠–º–µ–∫–æ–≤–æ", "away": "–§–ö –ü—Ä–∏–≤–æ–ª–∂—Å–∫", "score": "3:0"},
            {"stage": "1/8 —Ñ–∏–Ω–∞–ª–∞", "date": "28.05.2025", "home": "–§–ö –ü—Ä–∏–≤–æ–ª–∂—Å–∫", "away": "–§–ö –≠–º–µ–∫–æ–≤–æ", "score": "3:4"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –ü–æ–º–∞—Ä—ã", "away": "–§–ö –°–æ—Ç–Ω—É—Ä", "score": "7:2"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –°–æ—Ç–Ω—É—Ä", "away": "–§–ö –ü–æ–º–∞—Ä—ã", "score": "1:4"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –ü–∞—Ä–∞—Ç—ã", "away": "–§–ö –ß–∞—Å–æ–≤–µ–Ω–Ω–∞—è", "score": "4:0"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –ß–∞—Å–æ–≤–µ–Ω–Ω–∞—è", "away": "–§–ö –ü–∞—Ä–∞—Ç—ã", "score": "5:4"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –≠–º–µ–∫–æ–≤–æ", "away": "–§–ö –Ø—Ä–∞–º–æ—Ä", "score": "2:0"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –Ø—Ä–∞–º–æ—Ä", "away": "–§–ö –≠–º–µ–∫–æ–≤–æ", "score": "2:2"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –ü–µ—Ç—å—è–ª", "away": "–§–ö –ö–∞—Ä–∞–º–∞—Å—Å—ã", "score": "1:2"},
            {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –ö–∞—Ä–∞–º–∞—Å—Å—ã", "away": "–§–ö –ü–µ—Ç—å—è–ª", "score": "3:4 (–ø–µ–Ω. 2:4)"},
            {"stage": "1/2 —Ñ–∏–Ω–∞–ª–∞", "date": "02.07.2025", "home": "–§–ö –ü–æ–º–∞—Ä—ã", "away": "–§–ö –ü–∞—Ä–∞—Ç—ã", "score": None},
            {"stage": "1/2 —Ñ–∏–Ω–∞–ª–∞", "date": "16.07.2025", "home": "–§–ö –ü–∞—Ä–∞—Ç—ã", "away": "–§–ö –ü–æ–º–∞—Ä—ã", "score": None},
            {"stage": "1/2 —Ñ–∏–Ω–∞–ª–∞", "date": "02.07.2025", "home": "–§–ö –≠–º–µ–∫–æ–≤–æ", "away": "–§–ö –ü–µ—Ç—å—è–ª", "score": None},
            {"stage": "1/2 —Ñ–∏–Ω–∞–ª–∞", "date": "16.07.2025", "home": "–§–ö –ü–µ—Ç—å—è–ª", "away": "–§–ö –≠–º–µ–∫–æ–≤–æ", "score": None},
            {"stage": "–§–∏–Ω–∞–ª", "date": "30.07.2025", "home": "?", "away": "?", "score": None}
        ]

        from collections import defaultdict
        stages = defaultdict(list)
        for m in cup_matches:
            stages[m["stage"]].append(m)

        for stage in ["1/8 —Ñ–∏–Ω–∞–ª–∞", "1/4 —Ñ–∏–Ω–∞–ª–∞", "1/2 —Ñ–∏–Ω–∞–ª–∞", "–§–∏–Ω–∞–ª"]:
            st.markdown(f'<div class="cup-header">{stage}</div>', unsafe_allow_html=True)
            for m in stages[stage]:
                date = m["date"]
                home = m["home"]
                away = m["away"]
                score = m["score"]

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if score:
                    try:
                        hg, ag = map(int, score.split(":"))
                        if hg > ag:
                            home = f'<span class="cup-winner">{home}</span>'
                        elif ag > hg:
                            away = f'<span class="cup-winner">{away}</span>'
                    except:
                        pass
                    score_html = f'<span class="cup-result">{score}</span>'
                else:
                    score_html = ""

                st.markdown(
                    f'''
                    <div class="cup-row cup-match">
                        <div>{date}</div>
                        <div>{home} ‚Äì {away}</div>
                        <div>{score_html}</div>
                    </div>
                    ''',
                    unsafe_allow_html=True
                )

    with tab3:  # –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
        st.title("üë• –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥")

        # CSS —Å—Ç–∏–ª–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ)
        st.markdown("""
        <style>
        .team-table {
            font-size: 16px;
            width: 100%;
        }
        .team-table th {
            background-color: #4CAF50;
            color: white;
        }
        </style>
        """, unsafe_allow_html=True)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            with open('squads.json', 'r', encoding='utf-8') as f:
                team_squads = json.load(f)
        except FileNotFoundError:
            st.error("–§–∞–π–ª squads.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            team_squads = {}

        # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
        st.subheader("üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞")
        search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞", "", key="player_search").lower()

        # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
        selected_team = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", sorted(team_squads.keys()))

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
        players = team_squads.get(selected_team, [])
        if search_query:
            players = [p for p in players if search_query in p["name"].lower()]

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞
        if not players:
            st.warning("–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(players)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ñ–æ—Ç–æ
            st.dataframe(
                df[['name', 'number', 'position', 'goals', 'assists', 'yellow_cards', 'red_cards']]
                .rename(columns={
                    'name': '–ò–≥—Ä–æ–∫',
                    'number': '–ù–æ–º–µ—Ä',
                    'position': '–ü–æ–∑–∏—Ü–∏—è',
                    'goals': '–ì–æ–ª—ã',
                    'assists': '–ü–µ—Ä–µ–¥–∞—á–∏',
                    'yellow_cards': '–ñ—ë–ª—Ç—ã–µ',
                    'red_cards': '–ö—Ä–∞—Å–Ω—ã–µ'
                }),
                column_config={
                    "–ì–æ–ª—ã": st.column_config.NumberColumn(format="%d"),
                    "–ü–µ—Ä–µ–¥–∞—á–∏": st.column_config.NumberColumn(format="%d"),
                    "–ñ—ë–ª—Ç—ã–µ": st.column_config.NumberColumn(format="%d"),
                    "–ö—Ä–∞—Å–Ω—ã–µ": st.column_config.NumberColumn(format="%d")
                },
                use_container_width=True,
                hide_index=True
            )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2 = st.columns(2)
        with col1:
            if st.button("+ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", type="secondary"):
                st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        with col2:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤—ã (JSON)",
                data=json.dumps(team_squads, ensure_ascii=False, indent=2),
                file_name="squads.json",
                mime="application/json"
            )

    with tab4:  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            with open('squads.json', 'r', encoding='utf-8') as f:
                team_squads = json.load(f)
        except FileNotFoundError:
            st.error("–§–∞–π–ª squads.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            team_squads = {}

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        all_players = []
        for team, players in team_squads.items():
            for player in players:
                player['team'] = team  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                all_players.append(player)

        if not all_players:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º")
        else:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(all_players)

            # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü
            st.markdown("""
            <style>
            .stat-table {
                margin-bottom: 30px;
            }
            .stat-title {
                font-size: 1.3em;
                color: #2c3e50;
                margin: 25px 0 10px 0;
                border-bottom: 2px solid #4CAF50;
                padding-bottom: 5px;
            }
            </style>
            """, unsafe_allow_html=True)

            # –¢–∞–±–ª–∏—Ü–∞ –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤
            st.markdown('<div class="stat-title">üèÖ –õ—É—á—à–∏–µ –±–æ–º–±–∞—Ä–¥–∏—Ä—ã</div>', unsafe_allow_html=True)
            scorers = df[df['goals'] > 0].sort_values('goals', ascending=False)
            if not scorers.empty:
                st.dataframe(
                    scorers[['name', 'team', 'goals']]
                    .rename(columns={
                        'name': '–ò–≥—Ä–æ–∫',
                        'team': '–ö–æ–º–∞–Ω–¥–∞',
                        'goals': '–ì–æ–ª—ã'
                    }),
                    column_config={
                        "–ì–æ–ª—ã": st.column_config.NumberColumn(format="%d")
                    },
                    use_container_width=True,
                    hide_index=True
                )
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–∞—Ö")

            # –¢–∞–±–ª–∏—Ü–∞ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            st.markdown('<div class="stat-title">üü® –ñ–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</div>', unsafe_allow_html=True)
            yellow_cards = df[df['yellow_cards'] > 0].sort_values('yellow_cards', ascending=False)
            if not yellow_cards.empty:
                st.dataframe(
                    yellow_cards[['name', 'team', 'yellow_cards']]
                    .rename(columns={
                        'name': '–ò–≥—Ä–æ–∫',
                        'team': '–ö–æ–º–∞–Ω–¥–∞',
                        'yellow_cards': '–ñ—ë–ª—Ç—ã–µ'
                    }),
                    column_config={
                        "–ñ—ë–ª—Ç—ã–µ": st.column_config.NumberColumn(format="%d")
                    },
                    use_container_width=True,
                    hide_index=True
                )
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö")

            # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            st.markdown('<div class="stat-title">üü• –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</div>', unsafe_allow_html=True)
            red_cards = df[df['red_cards'] > 0].sort_values('red_cards', ascending=False)
            if not red_cards.empty:
                st.dataframe(
                    red_cards[['name', 'team', 'red_cards']]
                    .rename(columns={
                        'name': '–ò–≥—Ä–æ–∫',
                        'team': '–ö–æ–º–∞–Ω–¥–∞',
                        'red_cards': '–ö—Ä–∞—Å–Ω—ã–µ'
                    }),
                    column_config={
                        "–ö—Ä–∞—Å–Ω—ã–µ": st.column_config.NumberColumn(format="%d")
                    },
                    use_container_width=True,
                    hide_index=True
                )
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö")

            # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            col1, col2, col3 = st.columns(3)
            with col1:
                st.download_button(
                    label="üì• –ì–æ–ª—ã (CSV)",
                    data=scorers.to_csv(index=False, encoding='utf-8-sig'),
                    file_name="goals_stats.csv",
                    mime="text/csv"
                )
            with col2:
                st.download_button(
                    label="üì• –ñ—ë–ª—Ç—ã–µ (CSV)",
                    data=yellow_cards.to_csv(index=False, encoding='utf-8-sig'),
                    file_name="yellow_cards_stats.csv",
                    mime="text/csv"
                )
            with col3:
                st.download_button(
                    label="üì• –ö—Ä–∞—Å–Ω—ã–µ (CSV)",
                    data=red_cards.to_csv(index=False, encoding='utf-8-sig'),
                    file_name="red_cards_stats.csv",
                    mime="text/csv"
                )

        def pluralize_ochko(n):
            n = abs(int(n))
            if 11 <= n % 100 <= 14:
                return "–æ—á–∫–æ–≤"
            elif n % 10 == 1:
                return "–æ—á–∫–æ"
            elif 2 <= n % 10 <= 4:
                return "–æ—á–∫–∞"
            else:
                return "–æ—á–∫–æ–≤"

        with tab5:  # –ê–Ω–æ–Ω—Å —Ç—É—Ä–∞

            try:
                matches = pd.read_csv("matches.csv", encoding='utf-8-sig')
                schedule = pd.read_csv("schedule.csv", encoding='utf-8-sig')
                with open("squads.json", 'r', encoding='utf-8') as f:
                    squads = json.load(f)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                st.stop()

            # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            schedule["–î–∞—Ç–∞"] = pd.to_datetime(schedule["–î–∞—Ç–∞"].astype(str) + ".2025", format="%d.%m.%Y", errors="coerce")
            today = pd.to_datetime(datetime.now().date())
            future_schedule = schedule[schedule["–î–∞—Ç–∞"] >= today].sort_values("–î–∞—Ç–∞")

            if future_schedule.empty:
                st.info("–í—Å–µ —Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
            else:
                next_round = future_schedule.iloc[0]["–¢—É—Ä"]
                st.subheader(f"‚öΩ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ç—É—Ä: ‚Ññ{next_round}" )
                round_matches = schedule[schedule["–¢—É—Ä"] == next_round]

                # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π
                st.markdown("### üóì –ú–∞—Ç—á–∏ —Ç—É—Ä–∞:")
                for _, match in round_matches.iterrows():
                    st.markdown(f"- **{match['–•–æ–∑—è–µ–≤–∞']} ‚Äî {match['–ì–æ—Å—Ç–∏']}**, {match['–î–∞—Ç–∞'].strftime('%d.%m.%Y')}")

                # –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"] = pd.to_numeric(matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"], errors='coerce')
                matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"] = pd.to_numeric(matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"], errors='coerce')
                played = matches.dropna(subset=["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤", "–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"])
                teams = pd.unique(matches[["–•–æ–∑—è–µ–≤–∞", "–ì–æ—Å—Ç–∏"]].values.ravel())
                stats = {team: {"–ò–≥—Ä—ã": 0, "–ü–æ–±–µ–¥—ã": 0, "–ù–∏—á—å–∏": 0, "–ü–æ—Ä–∞–∂–µ–Ω–∏—è": 0,
                                "–ó–∞–±–∏—Ç–æ": 0, "–ü—Ä–æ–ø—É—â–µ–Ω–æ": 0, "–û—á–∫–∏": 0} for team in teams}

                for _, row in played.iterrows():
                    home, away = row["–•–æ–∑—è–µ–≤–∞"], row["–ì–æ—Å—Ç–∏"]
                    hg, ag = int(row["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"]), int(row["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"])

                    stats[home]["–ò–≥—Ä—ã"] += 1
                    stats[away]["–ò–≥—Ä—ã"] += 1
                    stats[home]["–ó–∞–±–∏—Ç–æ"] += hg
                    stats[home]["–ü—Ä–æ–ø—É—â–µ–Ω–æ"] += ag
                    stats[away]["–ó–∞–±–∏—Ç–æ"] += ag
                    stats[away]["–ü—Ä–æ–ø—É—â–µ–Ω–æ"] += hg

                    if hg > ag:
                        stats[home]["–ü–æ–±–µ–¥—ã"] += 1
                        stats[home]["–û—á–∫–∏"] += 3
                        stats[away]["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"] += 1
                    elif ag > hg:
                        stats[away]["–ü–æ–±–µ–¥—ã"] += 1
                        stats[away]["–û—á–∫–∏"] += 3
                        stats[home]["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"] += 1
                    else:
                        stats[home]["–ù–∏—á—å–∏"] += 1
                        stats[away]["–ù–∏—á—å–∏"] += 1
                        stats[home]["–û—á–∫–∏"] += 1
                        stats[away]["–û—á–∫–∏"] += 1

                table_data = [{
                    "–ö–æ–º–∞–Ω–¥–∞": t,
                    "–û—á–∫–∏": s["–û—á–∫–∏"],
                    "–†–∞–∑–Ω–∏—Ü–∞": s["–ó–∞–±–∏—Ç–æ"] - s["–ü—Ä–æ–ø—É—â–µ–Ω–æ"]
                } for t, s in stats.items()]
                df_table = pd.DataFrame(table_data)
                leaders = df_table.sort_values(by=["–û—á–∫–∏", "–†–∞–∑–Ω–∏—Ü–∞"], ascending=False).head(3)

                st.markdown("### ü•á –õ–∏–¥–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:")
                for _, row in leaders.iterrows():
                    word = pluralize_ochko(row['–û—á–∫–∏'])
                    st.markdown(f"- {row['–ö–æ–º–∞–Ω–¥–∞']} ‚Äî {row['–û—á–∫–∏']} {word} (—Ä–∞–∑–Ω–∏—Ü–∞ {row['–†–∞–∑–Ω–∏—Ü–∞']})")

                # –ë–æ–º–±–∞—Ä–¥–∏—Ä—ã
                all_players = []
                for team, players in squads.items():
                    for player in players:
                        all_players.append({"–ò–≥—Ä–æ–∫": player["name"], "–ì–æ–ª—ã": player["goals"], "–ö–æ–º–∞–Ω–¥–∞": team})

                df_players = pd.DataFrame(all_players)
                top_scorers = df_players[df_players["–ì–æ–ª—ã"] > 0].sort_values("–ì–æ–ª—ã", ascending=False).head(3)

                st.markdown("### üéØ –õ—É—á—à–∏–µ –±–æ–º–±–∞—Ä–¥–∏—Ä—ã:")
                for _, row in top_scorers.iterrows():
                    st.markdown(f"- {row['–ò–≥—Ä–æ–∫']} ({row['–ö–æ–º–∞–Ω–¥–∞']}) ‚Äî {row['–ì–æ–ª—ã']} –≥–æ–ª(–æ–≤)")

                # st.markdown("### üü• –î–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                # st.markdown(f"- {"–¢–æ–º—Ü–µ–≤ –ê–ª–µ–∫—Å–µ–π"} ({"–§–ö –ü–∞—Ä–∞—Ç—ã"}) - {"—É–¥–∞–ª–µ–Ω–∏–µ"}")

                if st.button("–°–∫–∞—á–∞—Ç—å analytics.json"):
                    try:
                        with open("analytics.json", "rb") as f:
                            st.download_button(
                                label="‚¨áÔ∏è Download",
                                data=f,
                                file_name="analytics.json",
                                mime="application/json"
                            )
                    except FileNotFoundError:
                        st.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
