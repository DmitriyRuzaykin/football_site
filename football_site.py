import streamlit as st
import pandas as pd
import json
from datetime import datetime
from collections import defaultdict

st.set_page_config(page_title="–§—É—Ç–±–æ–ª –í–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ 2025", layout="wide")

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["–ß–µ–º–ø–∏–æ–Ω–∞—Ç", "–ö—É–±–æ–∫", "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

if page == "–ß–µ–º–ø–∏–æ–Ω–∞—Ç":
    col1, col2 = st.columns([1, 8])
    with col1:
        st.image("volzhsky_flag.jpg", use_container_width=True)
    with col2:
        st.title("üèÜ –ß–µ–º–ø–∏–æ–Ω–∞—Ç –í–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É 2025 –≥–æ–¥–∞")

    matches = pd.read_csv("matches.csv")
    df_schedule = pd.read_csv("schedule.csv")

    teams = pd.unique(matches[["–•–æ–∑—è–µ–≤–∞", "–ì–æ—Å—Ç–∏"]].values.ravel())
    stats = {team: {"–ò–≥—Ä—ã": 0, "–ü–æ–±–µ–¥—ã": 0, "–ù–∏—á—å–∏": 0, "–ü–æ—Ä–∞–∂–µ–Ω–∏—è": 0, "–ó–∞–±–∏—Ç–æ": 0, "–ü—Ä–æ–ø—É—â–µ–Ω–æ": 0, "–û—á–∫–∏": 0} for team
             in teams}

    for _, row in matches.iterrows():
        home, away = row["–•–æ–∑—è–µ–≤–∞"], row["–ì–æ—Å—Ç–∏"]
        hg, ag = row["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"], row["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (NaN –∏–ª–∏ –æ–±–∞ 0)
        if pd.isna(hg) or pd.isna(ag) or (hg == 0 and ag == 0):
            continue
        stats[home]["–ò–≥—Ä—ã"] += 1
        stats[away]["–ò–≥—Ä—ã"] += 1
        stats[home]["–ó–∞–±–∏—Ç–æ"] += hg
        stats[home]["–ü—Ä–æ–ø—É—â–µ–Ω–æ"] += ag
        stats[away]["–ó–∞–±–∏—Ç–æ"] += ag
        stats[away]["–ü—Ä–æ–ø—É—â–µ–Ω–æ"] += hg
        if hg > ag:
            stats[home]["–ü–æ–±–µ–¥—ã"] += 1
            stats[away]["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"] += 1
            stats[home]["–û—á–∫–∏"] += 3
        elif hg < ag:
            stats[away]["–ü–æ–±–µ–¥—ã"] += 1
            stats[home]["–ü–æ—Ä–∞–∂–µ–Ω–∏—è"] += 1
            stats[away]["–û—á–∫–∏"] += 3
        else:
            stats[home]["–ù–∏—á—å–∏"] += 1
            stats[away]["–ù–∏—á—å–∏"] += 1
            stats[home]["–û—á–∫–∏"] += 1
            stats[away]["–û—á–∫–∏"] += 1

    table_data = []
    for team, s in stats.items():
        s["–†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π"] = s["–ó–∞–±–∏—Ç–æ"] - s["–ü—Ä–æ–ø—É—â–µ–Ω–æ"]
        table_data.append({"–ö–æ–º–∞–Ω–¥–∞": team, **s})

    df = pd.DataFrame(table_data)
    df = df.sort_values(by=["–û—á–∫–∏", "–†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π"], ascending=[False, False]).reset_index(drop=True)
    df.insert(0, "‚Ññ", range(1, len(df) + 1))
    cols = df.columns.tolist()
    cols.remove("–û—á–∫–∏")
    cols.append("–û—á–∫–∏")
    df = df[cols]

    st.subheader("üìä –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
    st.dataframe(df, use_container_width=True)

    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π")
    played_matches = matches[
        (~matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"].isna() & ~matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"].isna()) &
        ((matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"] != 0) | (matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"] != 0))
        ]

    played_rounds = sorted(played_matches["–¢—É—Ä"].unique())

    if played_rounds:
        selected_round = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä", played_rounds)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞
        round_matches = matches[matches["–¢—É—Ä"] == selected_round].copy()


        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        def format_result(row):
            if pd.isna(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤']) or pd.isna(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π']):
                return "–ù–µ —Å—ã–≥—Ä–∞–Ω–æ"
            try:
                return f"{int(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤'])}:{int(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π'])}"
            except (ValueError, TypeError):
                return "–ù–µ —Å—ã–≥—Ä–∞–Ω–æ"


        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        round_matches["–†–µ–∑—É–ª—å—Ç–∞—Ç"] = round_matches.apply(format_result, axis=1)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            round_matches[["–•–æ–∑—è–µ–≤–∞", "–ì–æ—Å—Ç–∏", "–†–µ–∑—É–ª—å—Ç–∞—Ç"]],
            use_container_width=True,
            hide_index=True,
            column_config={
                "–•–æ–∑—è–µ–≤–∞": "–•–æ–∑—è–µ–≤–∞",
                "–ì–æ—Å—Ç–∏": "–ì–æ—Å—Ç–∏",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç": st.column_config.TextColumn("–†–µ–∑—É–ª—å—Ç–∞—Ç")
            }
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç—á—É
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–µ
        played_in_round = round_matches[
            (~round_matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"].isna()) &
            (~round_matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"].isna()) &
            ((round_matches["–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤"] != 0) | (round_matches["–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π"] != 0))
            ]

        if not played_in_round.empty:
            match_list = [f"{row['–•–æ–∑—è–µ–≤–∞']} - {row['–ì–æ—Å—Ç–∏']} ({int(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤'])}:{int(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π'])})"
                          for _, row in played_in_round.iterrows()]
            selected_match = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", match_list)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
            selected_match_data = None
            for _, row in played_in_round.iterrows():
                if f"{row['–•–æ–∑—è–µ–≤–∞']} - {row['–ì–æ—Å—Ç–∏']} ({int(row['–ì–æ–ª—ã —Ö–æ–∑—è–µ–≤'])}:{int(row['–ì–æ–ª—ã –≥–æ—Å—Ç–µ–π'])})" == selected_match:
                    selected_match_data = row
                    break

            if selected_match_data is not None:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –º–∞—Ç—á–µ–π
                try:
                    with open('squads.json', 'r', encoding='utf-8') as f:
                        team_squads = json.load(f)
                    with open('match_stats.json', 'r', encoding='utf-8') as f:
                        match_stats = json.load(f)
                except FileNotFoundError as e:
                    st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç—á—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                    team_squads = {}
                    match_stats = {"matches": []}

                if team_squads:
                    home_team = selected_match_data['–•–æ–∑—è–µ–≤–∞']
                    away_team = selected_match_data['–ì–æ—Å—Ç–∏']
                    match_date = selected_match_data.get('–î–∞—Ç–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')

                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç—á–∞
                    current_match_stats = None
                    for match in match_stats["matches"]:
                        if (match["home_team"] == home_team and
                                match["away_team"] == away_team and
                                match.get("round") == selected_round):
                            current_match_stats = match
                            break

                    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    tab1, tab2, tab3 = st.tabs(["–ì–æ–ª—ã", "–ñ—ë–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏", "–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"])

                    with tab1:
                        st.markdown(f"### –ì–æ–ª—ã –≤ –º–∞—Ç—á–µ {home_team} - {away_team}")
                        if current_match_stats and "goals" in current_match_stats and current_match_stats["goals"]:
                            goals_data = []
                            for goal in current_match_stats["goals"]:
                                goals_data.append({
                                    "–ö–æ–º–∞–Ω–¥–∞": goal["team"],
                                    "–ò–≥—Ä–æ–∫": goal["player"],
                                    "–ú–∏–Ω—É—Ç–∞": goal["minute"],
                                    "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç": goal.get("assist", "-")
                                })
                            st.dataframe(
                                pd.DataFrame(goals_data),
                                use_container_width=True,
                                hide_index=True
                            )
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–∞—Ö –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ")

                    with tab2:
                        st.markdown(f"### –ñ—ë–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Ç—á–µ {home_team} - {away_team}")
                        if current_match_stats and "yellow_cards" in current_match_stats and current_match_stats[
                            "yellow_cards"]:
                            yellow_data = []
                            for card in current_match_stats["yellow_cards"]:
                                yellow_data.append({
                                    "–ö–æ–º–∞–Ω–¥–∞": card["team"],
                                    "–ò–≥—Ä–æ–∫": card["player"],
                                    "–ú–∏–Ω—É—Ç–∞": card["minute"]
                                })
                            st.dataframe(
                                pd.DataFrame(yellow_data),
                                use_container_width=True,
                                hide_index=True
                            )
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ")

                    with tab3:
                        st.markdown(f"### –ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞—Ç—á–µ {home_team} - {away_team}")
                        if current_match_stats and "red_cards" in current_match_stats and current_match_stats[
                            "red_cards"]:
                            red_data = []
                            for card in current_match_stats["red_cards"]:
                                red_data.append({
                                    "–ö–æ–º–∞–Ω–¥–∞": card["team"],
                                    "–ò–≥—Ä–æ–∫": card["player"],
                                    "–ú–∏–Ω—É—Ç–∞": card["minute"]
                                })
                            st.dataframe(
                                pd.DataFrame(red_data),
                                use_container_width=True,
                                hide_index=True
                            )
                        else:
                            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ")
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞")
        else:
            st.info("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–µ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤.")

    st.subheader("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π (–ø–æ —Ç—É—Ä–∞–º)")
    df_schedule["–î–∞—Ç–∞"] = pd.to_datetime(df_schedule["–î–∞—Ç–∞"].astype(str) + ".2025", format="%d.%m.%Y", errors="coerce")
    df_schedule["–î–∞—Ç–∞"] = df_schedule["–î–∞—Ç–∞"].dt.strftime("%d.%m.%Y")
    today = pd.to_datetime(datetime.now().date())
    future_rounds = pd.to_datetime(df_schedule["–î–∞—Ç–∞"], format="%d.%m.%Y", errors="coerce")
    default_round = df_schedule.loc[future_rounds >= today, "–¢—É—Ä"].min() if not future_rounds.empty else df_schedule[
        "–¢—É—Ä"].max()
    selected_schedule_round = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
        sorted(df_schedule["–¢—É—Ä"].unique()),
        index=list(sorted(df_schedule["–¢—É—Ä"].unique())).index(default_round),
        key="schedule"
    )
    st.dataframe(df_schedule[df_schedule["–¢—É—Ä"] == selected_schedule_round], use_container_width=True)

elif page == "–ö—É–±–æ–∫":
    st.title("üèÜ –ö—É–±–æ–∫ –í–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É 2025 –≥–æ–¥–∞")

    # CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    st.markdown("""
    <style>
    .cup-table {
        width: 100%;
        border-collapse: collapse;
    }
    .cup-table th {
        background-color: #4CAF50;
        color: white;
        padding: 10px;
        text-align: center;
    }
    .cup-table td {
        padding: 8px;
        border-bottom: 1px solid #ddd;
        text-align: center;
    }
    .cup-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    .winner {
        font-weight: bold;
        color: #2e7d32;
    }
    .stage-header {
        font-size: 1.2em;
        color: #2c3e50;
        margin: 20px 0 10px 0;
    }
    </style>
    """, unsafe_allow_html=True)

    # –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π –∫—É–±–∫–∞ (–ø—Ä–∏–º–µ—Ä)
    cup_matches = [
        # 1/8 —Ñ–∏–Ω–∞–ª–∞
        {"stage": "1/8 —Ñ–∏–Ω–∞–ª–∞", "date": "07.05.2025", "home": "–§–ö –≠–º–µ–∫–æ–≤–æ", "away": "–§–ö –ü—Ä–∏–≤–æ–ª–∂—Å–∫", "score": "3:0"},
        {"stage": "1/8 —Ñ–∏–Ω–∞–ª–∞", "date": "21.05.2025", "home": "–§–ö –ü—Ä–∏–≤–æ–ª–∂—Å–∫", "away": "–§–ö –≠–º–µ–∫–æ–≤–æ", "score": None},

        # 1/4 —Ñ–∏–Ω–∞–ª–∞
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –ü–æ–º–∞—Ä—ã", "away": "–§–ö –°–æ—Ç–Ω—É—Ä", "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –°–æ—Ç–Ω—É—Ä", "away": "–§–ö –ü–æ–º–∞—Ä—ã", "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –ü–∞—Ä–∞—Ç—ã", "away": "–§–ö –ß–∞—Å–æ–≤–µ–Ω–Ω–∞—è", "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –ß–∞—Å–æ–≤–µ–Ω–Ω–∞—è", "away": "–§–ö –ü–∞—Ä–∞—Ç—ã", "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–ü–æ–±. –≠–º–µ–∫–æ–≤–æ/–ü—Ä–∏–≤–æ–ª–∂—Å–∫", "away": "–§–ö –Ø—Ä–∞–º–æ—Ä",
         "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –Ø—Ä–∞–º–æ—Ä", "away": "–ü–æ–±. –≠–º–µ–∫–æ–≤–æ/–ü—Ä–∏–≤–æ–ª–∂—Å–∫",
         "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "04.06.2025", "home": "–§–ö –ü–µ—Ç—ä—è–ª", "away": "–§–ö –ö–∞—Ä–∞–º–∞—Å—Å—ã", "score": None},
        {"stage": "1/4 —Ñ–∏–Ω–∞–ª–∞", "date": "18.06.2025", "home": "–§–ö –ö–∞—Ä–∞–º–∞—Å—Å—ã", "away": "–§–ö –ü–µ—Ç—ä—è–ª", "score": None},

        # 1/2 —Ñ–∏–Ω–∞–ª–∞
        {"stage": "1/2 —Ñ–∏–Ω–∞–ª–∞", "date": "02.07.2025", "home": "?", "away": "?", "score": None},
        {"stage": "1/2 —Ñ–∏–Ω–∞–ª–∞", "date": "16.07.2025", "home": "?", "away": "?", "score": None},

        # –§–∏–Ω–∞–ª
        {"stage": "–§–∏–Ω–∞–ª", "date": "30.07.2025", "home": "?", "away": "?", "score": None}
    ]

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º
    stages = {
        "1/8 —Ñ–∏–Ω–∞–ª–∞": [],
        "1/4 —Ñ–∏–Ω–∞–ª–∞": [],
        "1/2 —Ñ–∏–Ω–∞–ª–∞": [],
        "–§–∏–Ω–∞–ª": []
    }

    for match in cup_matches:
        stages[match["stage"]].append(match)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    for stage, matches in stages.items():
        st.markdown(f'<div class="stage-header">{stage}</div>', unsafe_allow_html=True)

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        df = pd.DataFrame(matches)


        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        def format_match(row):
            if pd.isna(row["score"]):
                return f"{row['home']} - {row['away']}"

            home_goals, away_goals = map(int, row["score"].split(':'))

            home = f"<span class='winner'>{row['home']}</span>" if home_goals > away_goals else row['home']
            away = f"<span class='winner'>{row['away']}</span>" if away_goals > home_goals else row['away']

            return f"{home} - {away} <b>({row['score']})</b>"


        df["–ú–∞—Ç—á"] = df.apply(format_match, axis=1)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.markdown(
            df[["date", "–ú–∞—Ç—á"]]
            .rename(columns={"date": "–î–∞—Ç–∞"})
            .to_html(escape=False, index=False, classes="cup-table"),
            unsafe_allow_html=True
        )

elif page == "–°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥":
    st.title("üë• –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥")

    # CSS —Å—Ç–∏–ª–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ)
    st.markdown("""
    <style>
    .team-table {
        font-size: 16px;
        width: 100%;
    }
    .team-table th {
        background-color: #4CAF50;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        with open('squads.json', 'r', encoding='utf-8') as f:
            team_squads = json.load(f)
    except FileNotFoundError:
        st.error("–§–∞–π–ª squads.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        team_squads = {}

    # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
    st.subheader("üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞")
    search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞", "", key="player_search").lower()

    # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
    selected_team = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", sorted(team_squads.keys()))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
    players = team_squads.get(selected_team, [])
    if search_query:
        players = [p for p in players if search_query in p["name"].lower()]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞
    if not players:
        st.warning("–ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(players)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ñ–æ—Ç–æ (–∑–∞–≥–ª—É—à–∫–∏)
        df['–§–æ—Ç–æ'] = "üë§"

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        st.dataframe(
            df[['–§–æ—Ç–æ', 'name', 'number', 'position', 'goals', 'assists', 'yellow_cards', 'red_cards']]
            .rename(columns={
                'name': '–ò–≥—Ä–æ–∫',
                'number': '–ù–æ–º–µ—Ä',
                'position': '–ü–æ–∑–∏—Ü–∏—è',
                'goals': '–ì–æ–ª—ã',
                'assists': '–ü–µ—Ä–µ–¥–∞—á–∏',
                'yellow_cards': '–ñ—ë–ª—Ç—ã–µ',
                'red_cards': '–ö—Ä–∞—Å–Ω—ã–µ'
            }),
            column_config={
                "–§–æ—Ç–æ": st.column_config.TextColumn("–§–æ—Ç–æ"),
                "–ì–æ–ª—ã": st.column_config.NumberColumn(format="%d"),
                "–ü–µ—Ä–µ–¥–∞—á–∏": st.column_config.NumberColumn(format="%d"),
                "–ñ—ë–ª—Ç—ã–µ": st.column_config.NumberColumn(format="%d"),
                "–ö—Ä–∞—Å–Ω—ã–µ": st.column_config.NumberColumn(format="%d")
            },
            use_container_width=True,
            hide_index=True
        )

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    with col1:
        if st.button("+ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", type="secondary"):
            st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    with col2:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤—ã (JSON)",
            data=json.dumps(team_squads, ensure_ascii=False, indent=2),
            file_name="squads.json",
            mime="application/json"
        )

elif page == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    st.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        with open('squads.json', 'r', encoding='utf-8') as f:
            team_squads = json.load(f)
    except FileNotFoundError:
        st.error("–§–∞–π–ª squads.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        team_squads = {}

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    all_players = []
    for team, players in team_squads.items():
        for player in players:
            player['team'] = team  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            all_players.append(player)

    if not all_players:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º")
    else:
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_players)

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü
        st.markdown("""
        <style>
        .stat-table {
            margin-bottom: 30px;
        }
        .stat-title {
            font-size: 1.3em;
            color: #2c3e50;
            margin: 25px 0 10px 0;
            border-bottom: 2px solid #4CAF50;
            padding-bottom: 5px;
        }
        </style>
        """, unsafe_allow_html=True)

        # –¢–∞–±–ª–∏—Ü–∞ –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤
        st.markdown('<div class="stat-title">üèÖ –õ—É—á—à–∏–µ –±–æ–º–±–∞—Ä–¥–∏—Ä—ã</div>', unsafe_allow_html=True)
        scorers = df[df['goals'] > 0].sort_values('goals', ascending=False)
        if not scorers.empty:
            st.dataframe(
                scorers[['team', 'name', 'position', 'goals']]
                .rename(columns={
                    'team': '–ö–æ–º–∞–Ω–¥–∞',
                    'name': '–ò–≥—Ä–æ–∫',
                    'position': '–ü–æ–∑–∏—Ü–∏—è',
                    'goals': '–ì–æ–ª—ã'
                }),
                column_config={
                    "–ì–æ–ª—ã": st.column_config.NumberColumn(format="%d")
                },
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–∞—Ö")

        # –¢–∞–±–ª–∏—Ü–∞ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        st.markdown('<div class="stat-title">üü® –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ (–∂–µ–ª—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏)</div>', unsafe_allow_html=True)
        yellow_cards = df[df['yellow_cards'] > 0].sort_values('yellow_cards', ascending=False)
        if not yellow_cards.empty:
            st.dataframe(
                yellow_cards[['team', 'name', 'position', 'yellow_cards']]
                .rename(columns={
                    'team': '–ö–æ–º–∞–Ω–¥–∞',
                    'name': '–ò–≥—Ä–æ–∫',
                    'position': '–ü–æ–∑–∏—Ü–∏—è',
                    'yellow_cards': '–ñ—ë–ª—Ç—ã–µ'
                }),
                column_config={
                    "–ñ—ë–ª—Ç—ã–µ": st.column_config.NumberColumn(format="%d")
                },
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∂–µ–ª—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö")

        # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        st.markdown('<div class="stat-title">üü• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏)</div>', unsafe_allow_html=True)
        red_cards = df[df['red_cards'] > 0].sort_values('red_cards', ascending=False)
        if not red_cards.empty:
            st.dataframe(
                red_cards[['team', 'name', 'position', 'red_cards']]
                .rename(columns={
                    'team': '–ö–æ–º–∞–Ω–¥–∞',
                    'name': '–ò–≥—Ä–æ–∫',
                    'position': '–ü–æ–∑–∏—Ü–∏—è',
                    'red_cards': '–ö—Ä–∞—Å–Ω—ã–µ'
                }),
                column_config={
                    "–ö—Ä–∞—Å–Ω—ã–µ": st.column_config.NumberColumn(format="%d")
                },
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∞—Å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö")

        # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        with col1:
            st.download_button(
                label="üì• –ì–æ–ª—ã (CSV)",
                data=scorers.to_csv(index=False, encoding='utf-8-sig'),
                file_name="goals_stats.csv",
                mime="text/csv"
            )
        with col2:
            st.download_button(
                label="üì• –ñ—ë–ª—Ç—ã–µ (CSV)",
                data=yellow_cards.to_csv(index=False, encoding='utf-8-sig'),
                file_name="yellow_cards_stats.csv",
                mime="text/csv"
            )
        with col3:
            st.download_button(
                label="üì• –ö—Ä–∞—Å–Ω—ã–µ (CSV)",
                data=red_cards.to_csv(index=False, encoding='utf-8-sig'),
                file_name="red_cards_stats.csv",
                mime="text/csv"
            )
